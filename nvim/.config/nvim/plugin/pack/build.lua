-- ---@param stderr boolean?
-- ---@return fun(err?: string, data?: string)
-- local function handle_stdio(stderr)
-- 	local nvim_echo = vim.schedule_wrap(vim.api.nvim_echo)
-- 	return function(err, data)
-- 		if err then
-- 			error(err)
-- 		elseif data then
-- 			nvim_echo({
-- 				{ vim.trim(data), stderr and "ErrorMsg" or nil },
-- 			}, true, stderr and "shell_err" or "shell_out")
-- 		end
-- 	end
-- end
--
-- ---@param pkg table
-- ---@return nil|fun(progress: table): success: boolean, result: any
-- local function make_build_fn(pkg)
-- 	if type(pkg.spec.data.build) == "function" then
-- 		return function()
-- 			return pcall(pkg.spec.data.build, pkg)
-- 		end
-- 	elseif type(pkg.spec.data.build) == "table" and vim.islist(pkg.spec.data.build) then
-- 		return function()
-- 			return vim.system(pkg.spec.data.build, {
-- 				cwd = pkg.path,
-- 				stdout = handle_stdio(),
-- 				stderr = handle_stdio(true),
-- 				text = true,
-- 			})
-- 				:wait().code == 0
-- 		end
-- 	elseif type(pkg.spec.data.build) == "string" then
-- 		return function()
-- 			return pcall(vim.cmd[pkg.spec.data.build])
-- 		end
-- 	end
-- end
--
-- local builds = {}
-- local augroup = vim.api.nvim_create_augroup("build", { clear = true })
-- vim.api.nvim_create_autocmd("PackChanged", {
-- 	group = augroup,
-- 	pattern = "*",
-- 	callback = function(args)
-- 		local pkg = args.data
-- 		if pkg.kind ~= "delete" and pkg.spec.data then
-- 			builds[pkg.spec.name] = make_build_fn(pkg)
-- 			vim.print(vim.inspect(builds[pkg.spec.name]))
-- 		end
-- 	end,
-- })
--
-- vim.api.nvim_create_autocmd("Progress", {
-- 	group = augroup,
-- 	pattern = "vim.pack",
-- 	callback = function(args)
-- 		vim.print(vim.inspect(builds))
-- 		if args.data.status == "success" then
-- 			local n = #builds
-- 			local progress = {
-- 				kind = "progress",
-- 				status = "running",
-- 				percent = math.floor(#builds * 100 / n),
-- 				title = "build",
-- 			}
-- 			for pkg_name, build_fn in pairs(builds) do
-- 				progress.id = vim.api.nvim_echo({
-- 					{ ("building %s..."):format(pkg_name) },
-- 				}, true, progress)
-- 				local success, err = build_fn()
-- 				local msg, hl
-- 				if success then
-- 					progress.status = "success"
-- 					msg = "done"
-- 				else
-- 					progress.status = "failed"
-- 					msg = "failed to build"
-- 					hl = "ErrorMsg"
-- 					if err then
-- 						msg = ("%s: %s"):format(msg, err)
-- 					end
-- 				end
--
-- 				builds[pkg_name] = nil
-- 				progress.percent = math.floor(#builds * 100 / n)
-- 				vim.api.nvim_echo({ { msg, hl } }, true, progress)
-- 			end
-- 		end
-- 	end,
-- })
