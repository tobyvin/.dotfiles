#!/usr/bin/env python3

from dataclasses import asdict, dataclass
from functools import cached_property
import sys
import time
from typing import Self, Tuple

import requests

WWO_CODE = {
    "113": "Sunny",
    "116": "PartlyCloudy",
    "119": "Cloudy",
    "122": "VeryCloudy",
    "143": "Fog",
    "176": "LightShowers",
    "179": "LightSleetShowers",
    "182": "LightSleet",
    "185": "LightSleet",
    "200": "ThunderyShowers",
    "227": "LightSnow",
    "230": "HeavySnow",
    "248": "Fog",
    "260": "Fog",
    "263": "LightShowers",
    "266": "LightRain",
    "281": "LightSleet",
    "284": "LightSleet",
    "293": "LightRain",
    "296": "LightRain",
    "299": "HeavyShowers",
    "302": "HeavyRain",
    "305": "HeavyShowers",
    "308": "HeavyRain",
    "311": "LightSleet",
    "314": "LightSleet",
    "317": "LightSleet",
    "320": "LightSnow",
    "323": "LightSnowShowers",
    "326": "LightSnowShowers",
    "329": "HeavySnow",
    "332": "HeavySnow",
    "335": "HeavySnowShowers",
    "338": "HeavySnow",
    "350": "LightSleet",
    "353": "LightShowers",
    "356": "HeavyShowers",
    "359": "HeavyRain",
    "362": "LightSleetShowers",
    "365": "LightSleetShowers",
    "368": "LightSnowShowers",
    "371": "HeavySnowShowers",
    "374": "LightSleetShowers",
    "377": "LightSleet",
    "386": "ThunderyShowers",
    "389": "ThunderyHeavyRain",
    "392": "ThunderySnowShowers",
    "395": "HeavySnowShowers",
}

WEATHER_SYMBOL_WI = {
    "Unknown": ("", ""),
    "Cloudy": ("", ""),
    "Fog": ("", ""),
    "HeavyRain": ("", ""),
    "HeavyShowers": ("", ""),
    "HeavySnow": ("", ""),
    "HeavySnowShowers": ("", ""),
    "LightRain": ("", ""),
    "LightShowers": ("", ""),
    "LightSleet": ("", ""),
    "LightSleetShowers": ("", ""),
    "LightSnow": ("", ""),
    "LightSnowShowers": ("", ""),
    "PartlyCloudy": ("", ""),
    "Sunny": ("", ""),
    "ThunderyHeavyRain": ("", ""),
    "ThunderyShowers": ("", ""),
    "ThunderySnowShowers": ("", ""),
    "VeryCloudy": ("", ""),
}


@dataclass(frozen=True)
class Condition:
    FeelsLikeC: str
    FeelsLikeF: str
    cloudcover: str
    humidity: str
    precipInches: str
    precipMM: str
    pressure: str
    pressureInches: str
    uvIndex: str
    visibility: str
    visibilityMiles: str
    weatherCode: str
    weatherDesc: list[str]
    weatherIconUrl: list[str]
    winddir16Point: str
    winddirDegree: str
    windspeedKmph: str
    windspeedMiles: str

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            FeelsLikeC=data.get("FeelsLikeC"),
            FeelsLikeF=data.get("FeelsLikeF"),
            cloudcover=data.get("cloudcover"),
            humidity=data.get("humidity"),
            precipInches=data.get("precipInches"),
            precipMM=data.get("precipMM"),
            pressure=data.get("pressure"),
            pressureInches=data.get("pressureInches"),
            uvIndex=data.get("uvIndex"),
            visibility=data.get("visibility"),
            visibilityMiles=data.get("visibilityMiles"),
            weatherCode=data.get("weatherCode"),
            weatherDesc=[d.get("value") for d in data.get("weatherDesc")],
            weatherIconUrl=[d.get("value") for d in data.get("weatherIconUrl")],
            winddir16Point=data.get("winddir16Point"),
            winddirDegree=data.get("winddirDegree"),
            windspeedKmph=data.get("windspeedKmph"),
            windspeedMiles=data.get("windspeedMiles"),
        )

    @cached_property
    def wwo_code(self) -> str:
        return WWO_CODE.get(self.weatherCode, "Unknown")

    @cached_property
    def icon(self) -> Tuple[str, str]:
        return WEATHER_SYMBOL_WI.get(self.wwo_code, ("", ""))


@dataclass(frozen=True)
class Current(Condition):
    localObsDateTime: str
    observation_time: str
    temp_C: str
    temp_F: str

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            localObsDateTime=data.get("localObsDateTime"),
            observation_time=data.get("observation_time"),
            temp_C=data.get("temp_C"),
            temp_F=data.get("temp_F"),
            **asdict(Condition.from_dict(data)),
        )

    @cached_property
    def date(self) -> str:
        return self.localObsDateTime.split(maxsplit=1)[0]

    @cached_property
    def time(self) -> str:
        return self.localObsDateTime.split(maxsplit=1)[1]


@dataclass(frozen=True)
class Astronomy:
    moon_illumination: str
    moon_phase: str
    moonrise: str
    moonset: str
    sunrise: str
    sunset: str

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            moon_illumination=data.get("moon_illumination"),
            moon_phase=data.get("moon_phase"),
            moonrise=data.get("moonrise"),
            moonset=data.get("moonset"),
            sunrise=data.get("sunrise"),
            sunset=data.get("sunset"),
        )


@dataclass(frozen=True)
class Hourly(Condition):
    DewPointC: str
    DewPointF: str
    HeatIndexC: str
    HeatIndexF: str
    WindChillC: str
    WindChillF: str
    WindGustKmph: str
    WindGustMiles: str
    chanceoffog: str
    chanceoffrost: str
    chanceofhightemp: str
    chanceofovercast: str
    chanceofrain: str
    chanceofremdry: str
    chanceofsnow: str
    chanceofsunshine: str
    chanceofthunder: str
    chanceofwindy: str
    diffRad: str
    shortRad: str
    tempC: str
    tempF: str
    time: str

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            DewPointC=data.get("DewPointC"),
            DewPointF=data.get("DewPointF"),
            HeatIndexC=data.get("HeatIndexC"),
            HeatIndexF=data.get("HeatIndexF"),
            WindChillC=data.get("WindChillC"),
            WindChillF=data.get("WindChillF"),
            WindGustKmph=data.get("WindGustKmph"),
            WindGustMiles=data.get("WindGustMiles"),
            chanceoffog=data.get("chanceoffog"),
            chanceoffrost=data.get("chanceoffrost"),
            chanceofhightemp=data.get("chanceofhightemp"),
            chanceofovercast=data.get("chanceofovercast"),
            chanceofrain=data.get("chanceofrain"),
            chanceofremdry=data.get("chanceofremdry"),
            chanceofsnow=data.get("chanceofsnow"),
            chanceofsunshine=data.get("chanceofsunshine"),
            chanceofthunder=data.get("chanceofthunder"),
            chanceofwindy=data.get("chanceofwindy"),
            diffRad=data.get("diffRad"),
            shortRad=data.get("shortRad"),
            tempC=data.get("tempC"),
            tempF=data.get("tempF"),
            time=data.get("time"),
            **asdict(Condition.from_dict(data)),
        )


@dataclass(frozen=True)
class Weather:
    astronomy: list[Astronomy]
    avgtempC: str
    avgtempF: str
    date: str
    hourly: list[Hourly]
    maxtempC: str
    maxtempF: str
    mintempC: str
    mintempF: str
    sunHour: str
    totalSnow_cm: str
    uvIndex: str

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            astronomy=[Astronomy.from_dict(d) for d in data.get("astronomy")],
            avgtempC=data.get("avgtempC"),
            avgtempF=data.get("avgtempF"),
            date=data.get("date"),
            hourly=[Hourly.from_dict(d) for d in data.get("hourly")],
            maxtempC=data.get("maxtempC"),
            maxtempF=data.get("maxtempF"),
            mintempC=data.get("mintempC"),
            mintempF=data.get("mintempF"),
            sunHour=data.get("sunHour"),
            totalSnow_cm=data.get("totalSnow_cm"),
            uvIndex=data.get("uvIndex"),
        )

    @cached_property
    def current_astronomy(self) -> Astronomy:
        return next(iter(self.astronomy))


@dataclass(frozen=True)
class Area:
    areaName: list[str]
    country: list[str]
    latitude: str
    longitude: str
    population: str
    region: list[str]
    weatherUrl: list[str]

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            areaName=[d.get("value") for d in data.get("areaName")],
            country=[d.get("value") for d in data.get("country")],
            latitude=data.get("latitude"),
            longitude=data.get("longitude"),
            population=data.get("population"),
            region=[d.get("value") for d in data.get("region")],
            weatherUrl=[d.get("value") for d in data.get("weatherUrl")],
        )


@dataclass(frozen=True)
class Request:
    query: str
    type: str

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            query=data.get("query"),
            type=data.get("type"),
        )


@dataclass(frozen=True)
class Wttr:
    conditions: list[Current]
    areas: list[Area]
    requests: list[Request]
    weather: list[Weather]

    @classmethod
    def get(cls, url="https://wttr.in/?format=j1") -> Self:
        data = requests.get(url).json()
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data) -> Self:
        return cls(
            conditions=[Current.from_dict(d) for d in data.get("current_condition")],
            areas=[Area.from_dict(d) for d in data.get("nearest_area")],
            requests=[Request.from_dict(d) for d in data.get("request")],
            weather=[Weather.from_dict(d) for d in data.get("weather")],
        )

    @cached_property
    def current_condition(self) -> Current:
        return next(iter(self.conditions))

    @cached_property
    def nearest_area(self) -> Area:
        return next(iter(self.areas))

    @cached_property
    def request(self) -> Request:
        return next(iter(self.requests))

    @cached_property
    def current_astronomy(self) -> Astronomy:
        return next(
            w for w in self.weather if w.date == self.current_condition.date
        ).current_astronomy

    @cached_property
    def is_night(self) -> bool:
        local = time.strptime(self.current_condition.time, "%I:%M %p")
        sunrise = time.strptime(self.current_astronomy.sunrise, "%I:%M %p")
        sunset = time.strptime(self.current_astronomy.sunset, "%I:%M %p")
        return local > sunset and local < sunrise

    @cached_property
    def current_icon(self) -> str:
        return self.current_condition.icon[int(self.is_night)]

    def __str__(self) -> str:
        return " {} {}°C ".format(self.current_icon, self.current_condition.temp_C)


def main():
    try:
        print(Wttr.get())
    except Exception as e:
        print(e, file=sys.stderr)


if __name__ == "__main__":
    main()
