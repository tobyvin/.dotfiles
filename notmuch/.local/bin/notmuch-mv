#!/usr/bin/env python3

import os
import sys
import time
import shutil
import subprocess

import notmuch2

UID: int = 0


def default_config() -> str:
    return os.path.join(
        os.environ.get(
            "XDG_CONFIG_HOME", os.path.join(os.path.expanduser("~"), ".config")
        ),
        "notmuch",
        os.environ.get("NOTMUCH_PROFILE", "default"),
        "config",
    )


def new_fname(db_path, fname, folder):
    global UID

    submaildir, basename = os.path.split(fname)
    state = os.path.basename(submaildir)
    flags = basename.rsplit(":", 1)[-1]
    timestamp = int(time.time())
    pid = os.getpid()
    UID += 1
    host = os.uname().nodename.split(".", 1)[0]
    basename = "{}.{}_{}.{}:{}".format(timestamp, pid, UID, host, flags)
    return os.path.join(db_path, folder, state, basename)


def main():
    dryrun = False
    updated = False

    match sys.argv:
        case [_, "--dryrun"] | [_, "-n"]:
            dryrun = True

    if os.environ.get("NOTMUCH_CONFIG") is None:
        os.environ["NOTMUCH_CONFIG"] = default_config()

    database = notmuch2.Database()
    db_path = database.default_path()

    maildir = "tobyvin.dev/tobyv/"
    rules = [
        ("-folder:Trash tag:trash", "Trash"),
        ("folder:Trash -tag:trash", "Archive"),
        ("-folder:Junk tag:spam", "Junk"),
        ("folder:Junk -tag:spam", "Archive"),
        ("-folder:Sent tag:sent", "Sent"),
        ("folder:Sent -tag:sent", "Archive"),
        ("-folder:INBOX tag:inbox", "INBOX"),
        ("folder:INBOX -tag:inbox", "Archive"),
    ]

    if dryrun:
        makedirs = lambda name: print(f"mkdir (dryrun): {name}")  # noqa: E731
        copy = lambda src, dst: print("copy (dryrun):", end=" ")  # noqa: E731
        move = lambda src, dst: print("move (dryrun):", end=" ")  # noqa: E731
        updatedb = lambda: print("Would update db", file=sys.stderr)  # noqa: E731
    else:
        makedirs = lambda name: os.makedirs(name, exist_ok=True)  # noqa: E731
        copy = lambda src, dst: shutil.copy(src, dst)  # noqa: E731
        move = lambda src, dst: shutil.move(src, dst)  # noqa: E731
        updatedb = lambda: subprocess.check_call(["notmuch", "new", "--no-hooks"])  # noqa: E731

    for query, folder in rules:
        query.replace("folder:", f"folder:{maildir}")
        folder = os.path.join(maildir, folder)

        for msg in database.messages(query):
            for src in [
                n for n in msg.filenames() if maildir in str(n) and folder not in str(n)
            ]:
                if [m for m in msg.filenames() if folder in str(m)]:
                    break
                dst = new_fname(db_path, src, folder)
                if not os.path.exists(os.path.dirname(dst)):
                    makedirs(os.path.dirname(dst))
                try:
                    if ("INBOX" in str(src) and "inbox" in msg.tags) or (
                        "Sent" in str(src) and "sent" in msg.tags
                    ):
                        copy(src, dst)
                    else:
                        move(src, dst)
                except FileNotFoundError as e:
                    print(f"Error: {e}", file=sys.stderr)
                    continue
                print("{} -> {}".format(src, dst).replace(str(db_path) + "/", ""))
                updated = True

    if updated:
        updatedb()


if __name__ == "__main__":
    main()
